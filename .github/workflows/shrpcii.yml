name: SHRP CII
on:
  workflow_dispatch:
    inputs:
      OFFICIAL_BUILD:
        description: 'set true if you wanna push Official Build'
        required: false
env:
  MANIFEST: "https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp.git -b twrp-11"
  # Recovery Manifest URL with -b branch
  DT_LINK: "https://github.com/Seifood/device_xiaomi_zeus-TWRP.git"
  # Your Device Tree Link
  VENDOR: "xiaomi"
  # Your Device's Vendor name as in used inside DT. Example: xiaomi, samsung, asus, etc.
  CODENAME: "zeus"
  # Your Device's Codename as in used inside DT." Example: nikel, phoenix, ginkgo, etc.
  KERNEL_LINK: "https://github.com/Divyanshu-Modi/Xiaomi_kernel_zeus.git -b zeus-s-oss"
  # Kernel repo link with optional -b branch. Only for building kernel from source. Ignore if using prebuilt.
  TARGET: "recoveryimage"
  # Set as recoveryimage (or bootimage if no recovery partition avaiable)
  FLAVOR: "eng"
  # eng by default, change the variable if you want userdebug
  SOURCE: "twrp"
  # Set as omni (or twrp if using v3_11.0)
  EXTRA_CMD: ""
  # For qualcomm FDE devices put git clone https://github.com/omnirom/android_vendor_qcom_opensource_commonsys --depth=1 -b android-9.0 vendor/qcom/opensource/commonsys in EXTRA CMD
  # If you want to Execute any external Command Before Compilation Starts
  TZ: "Asia/Kolkata"
  TOKEN: ${{ secrets.BOTTOKEN }}
  OFFICIAL_BUILD: ${{ github.event.inputs.OFFICIAL_BUILD }}

jobs:
  shrpCI:
    runs-on: ubuntu-20.04

    steps:
       - name: Cleaning Up Runner
         uses: rokibhasansagar/slimhub_actions@main

       - name: Recovery Compilation
         uses: SHRP-Devices/Recovery-Compiler@release

       - name: Uploading SHRP Build
         run: |
              cd ${BuildPath}/out/target/product/${CODENAME}/
              curl -sL https://git.io/file-transfer | sh
              ./transfer wet *recovery*.img
              ./transfer wet *recovery*.img             
       - name: Pushing Build To SourceForge
         run: |
              if [[ "$OFFICIAL_BUILD" == "true" ]]; then
                 printf "Uploading to SourceForge\n"
                 cd ${BuildPath}/out/target/product/${CODENAME}/
                 sudo apt-get update -y && sudo apt-get install expect -y
                 expect -c '
                 spawn sftp ${{ secrets.SFUSER }}@frs.sourceforge.net
                 expect \"yes/no\"
                 send "yes\r"
                 expect \"Password\"       
                 send "${{ secrets.SFPASS }}\r"
                 expect \"sftp> \"
                 send "cd /home/frs/project/shrp/test/\r"
                 set timeout -1
                 send "put *recovery*.img\r"
                 expect "Uploading"
                 expect "*100%*"
                 expect "sftp*"
                 send "put *recovery*.img\r"
                 expect "Uploading"
                 expect "*100%*"
                 expect "sftp*"
                 send "bye\r"
                 interact
                 '
              else
                 printf "Uploading to SourceForge\n"
                 cd ${BuildPath}/out/target/product/${CODENAME}/
                 sudo apt-get update -y && sudo apt-get install expect -y
                 expect -c '
                 spawn sftp ${{ secrets.SFUSER }}@frs.sourceforge.net
                 expect \"yes/no\"
                 send "yes\r"
                 expect \"Password\"       
                 send "${{ secrets.SFPASS }}\r"
                 expect \"sftp> \"
                 send "cd /home/frs/project/shrp/test/\r"
                 set timeout -1
                 send "put *recovery*.img\r"
                 expect "Uploading"
                 expect "*100%*"
                 expect "sftp*"
                 send "bye\r"
                 interact
                 '
              fi
